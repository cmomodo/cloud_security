"use strict";
// Direct Cognito client to replace Amplify Auth
Object.defineProperty(exports, "__esModule", { value: true });
exports.CognitoAuth = void 0;
exports.configureCognito = configureCognito;
exports.login = login;
exports.logout = logout;
exports.getCurrentSession = getCurrentSession;
exports.getCurrentCredentials = getCurrentCredentials;
exports.getIdToken = getIdToken;
const client_cognito_identity_provider_1 = require("@aws-sdk/client-cognito-identity-provider");
const client_cognito_identity_1 = require("@aws-sdk/client-cognito-identity");
// Singleton class to manage Cognito authentication
class CognitoAuth {
  constructor() {
    this.config = null;
    this.currentSession = null;
    this.cognitoClient = null;
    this.identityClient = null;
  }
  static getInstance() {
    if (!CognitoAuth.instance) {
      CognitoAuth.instance = new CognitoAuth();
    }
    return CognitoAuth.instance;
  }
  configure(config) {
    this.config = config;
    this.cognitoClient =
      new client_cognito_identity_provider_1.CognitoIdentityProviderClient({
        region: config.region,
      });
    this.identityClient = new client_cognito_identity_1.CognitoIdentityClient({
      region: config.region,
    });
  }
  async signIn(username, password) {
    if (!this.config || !this.cognitoClient) {
      throw new Error("Cognito is not configured");
    }
    try {
      const command =
        new client_cognito_identity_provider_1.InitiateAuthCommand({
          AuthFlow: "USER_PASSWORD_AUTH",
          ClientId: this.config.userPoolWebClientId,
          AuthParameters: {
            USERNAME: username,
            PASSWORD: password,
          },
        });
      const response = await this.cognitoClient.send(command);
      if (!response.AuthenticationResult) {
        throw new Error("Authentication failed");
      }
      const session = {
        idToken: response.AuthenticationResult.IdToken || "",
        accessToken: response.AuthenticationResult.AccessToken || "",
      };
      this.currentSession = session;
      return {
        idToken: response.AuthenticationResult.IdToken || "",
        accessToken: response.AuthenticationResult.AccessToken || "",
        refreshToken: response.AuthenticationResult.RefreshToken || "",
        expiresIn: response.AuthenticationResult.ExpiresIn || 3600,
      };
    } catch (error) {
      console.error("Error signing in:", error);
      throw error;
    }
  }
  async signOut() {
    if (!this.config || !this.cognitoClient || !this.currentSession) {
      return;
    }
    try {
      const command =
        new client_cognito_identity_provider_1.GlobalSignOutCommand({
          AccessToken: this.currentSession.accessToken,
        });
      await this.cognitoClient.send(command);
      this.currentSession = null;
    } catch (error) {
      console.error("Error signing out:", error);
      throw error;
    }
  }
  async getCurrentSession() {
    if (!this.currentSession) {
      return null;
    }
    try {
      // Validate the access token is still valid
      const command = new client_cognito_identity_provider_1.GetUserCommand({
        AccessToken: this.currentSession.accessToken,
      });
      await this.cognitoClient?.send(command);
      return this.currentSession;
    } catch (error) {
      console.error("Session expired or invalid");
      this.currentSession = null;
      return null;
    }
  }
  async getCredentials() {
    if (!this.config || !this.identityClient || !this.currentSession) {
      return null;
    }
    try {
      // Get identity ID
      const getIdCommand = new client_cognito_identity_1.GetIdCommand({
        IdentityPoolId: this.config.identityPoolId,
        Logins: {
          [`cognito-idp.${this.config.region}.amazonaws.com/${this.config.userPoolId}`]:
            this.currentSession.idToken,
        },
      });
      const { IdentityId } = await this.identityClient.send(getIdCommand);
      if (!IdentityId) {
        throw new Error("Failed to get identity ID");
      }
      // Get AWS credentials
      const getCredentialsCommand =
        new client_cognito_identity_1.GetCredentialsForIdentityCommand({
          IdentityId,
          Logins: {
            [`cognito-idp.${this.config.region}.amazonaws.com/${this.config.userPoolId}`]:
              this.currentSession.idToken,
          },
        });
      const credentialsResponse = await this.identityClient.send(
        getCredentialsCommand,
      );
      if (!credentialsResponse.Credentials) {
        throw new Error("Failed to get credentials");
      }
      // Update session with credentials
      this.currentSession = {
        ...this.currentSession,
        credentials: {
          accessKeyId: credentialsResponse.Credentials.AccessKeyId || "",
          secretAccessKey: credentialsResponse.Credentials.SecretKey || "",
          sessionToken: credentialsResponse.Credentials.SessionToken || "",
          expiration: credentialsResponse.Credentials.Expiration || new Date(),
        },
      };
      return this.currentSession;
    } catch (error) {
      console.error("Error getting credentials:", error);
      return null;
    }
  }
  async getIdToken() {
    const session = await this.getCurrentSession();
    return session ? session.idToken : null;
  }
}
exports.CognitoAuth = CognitoAuth;
// Helper functions for simpler API
function configureCognito(config) {
  CognitoAuth.getInstance().configure(config);
}
async function login(username, password) {
  return CognitoAuth.getInstance().signIn(username, password);
}
async function logout() {
  return CognitoAuth.getInstance().signOut();
}
async function getCurrentSession() {
  return CognitoAuth.getInstance().getCurrentSession();
}
async function getCurrentCredentials() {
  return CognitoAuth.getInstance().getCredentials();
}
async function getIdToken() {
  return CognitoAuth.getInstance().getIdToken();
}
//# sourceMappingURL=data:application/json;base64,
